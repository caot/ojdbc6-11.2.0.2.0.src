package oracle.jdbc.driver;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;
import oracle.jdbc.OracleResultSet.AuthorizationIndicator;
import oracle.jdbc.internal.OracleConnection;
import oracle.sql.ARRAY;
import oracle.sql.BFILE;
import oracle.sql.BLOB;
import oracle.sql.CHAR;
import oracle.sql.CLOB;
import oracle.sql.CustomDatum;
import oracle.sql.CustomDatumFactory;
import oracle.sql.DATE;
import oracle.sql.Datum;
import oracle.sql.INTERVALDS;
import oracle.sql.INTERVALYM;
import oracle.sql.NUMBER;
import oracle.sql.OPAQUE;
import oracle.sql.ORAData;
import oracle.sql.ORADataFactory;
import oracle.sql.RAW;
import oracle.sql.REF;
import oracle.sql.ROWID;
import oracle.sql.STRUCT;
import oracle.sql.TIMESTAMP;
import oracle.sql.TIMESTAMPLTZ;
import oracle.sql.TIMESTAMPTZ;

class OracleReturnResultSet extends BaseResultSet
{
  OracleStatement statement;
  Accessor[] returnAccessors;
  private static final String _Copyright_2007_Oracle_All_Rights_Reserved_ = null;
  public static final String BUILD_DATE = "Sat_Aug_14_12:18:34_PDT_2010";
  public static final boolean TRACE = false;

  OracleReturnResultSet(OracleStatement paramOracleStatement)
    throws SQLException
  {
    this.statement = paramOracleStatement;
    this.closed = false;

    this.returnAccessors = new Accessor[paramOracleStatement.numReturnParams];

    int i = 0;
    for (int j = 0; j < paramOracleStatement.numberOfBindPositions; j++)
    {
      Accessor localAccessor = paramOracleStatement.returnParamAccessors[j];

      if (localAccessor != null)
        this.returnAccessors[(i++)] = localAccessor;
    }
  }

  public boolean next()
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      if (this.closed) return false;

      if (!this.statement.returnParamsFetched)
      {
        this.statement.fetchDmlReturnParams();
        this.statement.setupReturnParamAccessors();
      }

      this.statement.currentRow += 1;
      this.statement.totalRowsVisited += 1;

      if (this.statement.currentRow >= this.statement.rowsDmlReturned) {
        return false;
      }
      return true;
    }
  }

  public void close()
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      super.close();

      this.statement.returnResultSet = null;
      this.statement.numReturnParams = 0;
      this.statement.totalRowsVisited = 0;
      this.statement.currentRow = -1;
      this.statement.returnParamsFetched = false;
      this.statement.rowsDmlReturned = 0;
      this.statement.returnParamBytes = null;
      this.statement.returnParamChars = null;
      this.statement.returnParamIndicators = null;
    }
  }

  public boolean wasNull()
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException;
      if (this.closed)
      {
        localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException.fillInStackTrace();
        throw localSQLException;
      }

      if ((this.statement.currentRow == -1) || (this.statement.lastIndex == 0))
      {
        localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 24);
        localSQLException.fillInStackTrace();
        throw localSQLException;
      }

      return this.returnAccessors[(this.statement.lastIndex - 1)].isNull(this.statement.currentRow);
    }
  }

  public ResultSetMetaData getMetaData()
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      if (!this.statement.isAutoGeneratedKey)
      {
        localObject1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
        ((SQLException)localObject1).fillInStackTrace();
        throw ((Throwable)localObject1);
      }

      if (this.closed)
      {
        localObject1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 10);
        ((SQLException)localObject1).fillInStackTrace();
        throw ((Throwable)localObject1);
      }

      if (this.statement.closed)
      {
        localObject1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 9);
        ((SQLException)localObject1).fillInStackTrace();
        throw ((Throwable)localObject1);
      }

      Object localObject1 = this.statement.autoKeyInfo;
      ((AutoKeyInfo)localObject1).statement = this.statement;
      ((AutoKeyInfo)localObject1).connection = this.statement.connection;
      ((AutoKeyInfo)localObject1).initMetaData(this);
      return localObject1;
    }
  }

  public Statement getStatement()
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      return this.statement;
    }
  }

  public String getString(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getString(i);
    }
  }

  public boolean getBoolean(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getBoolean(i);
    }
  }

  public OracleResultSet.AuthorizationIndicator getAuthorizationIndicator(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getAuthorizationIndicator(i);
    }
  }

  public byte getByte(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getByte(i);
    }
  }

  public short getShort(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getShort(i);
    }
  }

  public int getInt(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getInt(i);
    }
  }

  public long getLong(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getLong(i);
    }
  }

  public float getFloat(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getFloat(i);
    }
  }

  public double getDouble(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getDouble(i);
    }
  }

  public BigDecimal getBigDecimal(int paramInt1, int paramInt2)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt1 <= 0) || (paramInt1 > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt1;

      return this.returnAccessors[(paramInt1 - 1)].getBigDecimal(i, paramInt2);
    }
  }

  public byte[] getBytes(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getBytes(i);
    }
  }

  public Date getDate(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getDate(i);
    }
  }

  public Time getTime(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getTime(i);
    }
  }

  public Timestamp getTimestamp(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getTimestamp(i);
    }
  }

  public InputStream getAsciiStream(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public InputStream getUnicodeStream(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public InputStream getBinaryStream(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public Object getObject(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getObject(i);
    }
  }

  public ResultSet getCursor(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public Datum getOracleObject(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getOracleObject(i);
    }
  }

  public ROWID getROWID(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getROWID(i);
    }
  }

  public NUMBER getNUMBER(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getNUMBER(i);
    }
  }

  public DATE getDATE(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getDATE(i);
    }
  }

  public ARRAY getARRAY(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getARRAY(i);
    }
  }

  public STRUCT getSTRUCT(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getSTRUCT(i);
    }
  }

  public OPAQUE getOPAQUE(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createUnsupportedFeatureSqlException("getOPAQUE");
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public REF getREF(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getREF(i);
    }
  }

  public CHAR getCHAR(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getCHAR(i);
    }
  }

  public RAW getRAW(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getRAW(i);
    }
  }

  public BLOB getBLOB(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getBLOB(i);
    }
  }

  public CLOB getCLOB(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getCLOB(i);
    }
  }

  public BFILE getBFILE(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getBFILE(i);
    }
  }

  public BFILE getBfile(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      return getBFILE(paramInt);
    }
  }

  public CustomDatum getCustomDatum(int paramInt, CustomDatumFactory paramCustomDatumFactory)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public ORAData getORAData(int paramInt, ORADataFactory paramORADataFactory)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getORAData(i, paramORADataFactory);
    }
  }

  public Object getObject(int paramInt, Map paramMap)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getObject(i, paramMap);
    }
  }

  public Ref getRef(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      return getREF(paramInt);
    }
  }

  public Blob getBlob(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      return getBLOB(paramInt);
    }
  }

  public Clob getClob(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      return getCLOB(paramInt);
    }
  }

  public Array getArray(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public Reader getCharacterStream(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public BigDecimal getBigDecimal(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getBigDecimal(i);
  }

  public Date getDate(int paramInt, Calendar paramCalendar)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getDate(i, paramCalendar);
  }

  public Time getTime(int paramInt, Calendar paramCalendar)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getTime(i, paramCalendar);
  }

  public Timestamp getTimestamp(int paramInt, Calendar paramCalendar)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getTimestamp(i, paramCalendar);
  }

  public INTERVALYM getINTERVALYM(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getINTERVALYM(i);
  }

  public INTERVALDS getINTERVALDS(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getINTERVALDS(i);
  }

  public TIMESTAMP getTIMESTAMP(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getTIMESTAMP(i);
  }

  public TIMESTAMPTZ getTIMESTAMPTZ(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getTIMESTAMPTZ(i);
  }

  public TIMESTAMPLTZ getTIMESTAMPLTZ(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getTIMESTAMPLTZ(i);
  }

  public URL getURL(int paramInt)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException1;
      if (this.closed)
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
      {
        localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
        localSQLException1.fillInStackTrace();
        throw localSQLException1;
      }

      int i = this.statement.currentRow;
      if (i < 0)
      {
        SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
        localSQLException2.fillInStackTrace();
        throw localSQLException2;
      }

      this.statement.lastIndex = paramInt;

      return this.returnAccessors[(paramInt - 1)].getURL(i);
    }
  }

  public boolean isBeforeFirst()
    throws SQLException
  {
    if (this.closed)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }

    return (!isEmptyResultSet()) && (this.statement.currentRow == -1) && (!this.closed);
  }

  public boolean isAfterLast()
    throws SQLException
  {
    if (this.closed)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }

    return (!isEmptyResultSet()) && (this.closed);
  }

  public boolean isFirst()
    throws SQLException
  {
    return getRow() == 1;
  }

  public boolean isLast()
    throws SQLException
  {
    if (this.closed)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }

    return getRow() == this.statement.rowsDmlReturned;
  }

  public int getRow()
    throws SQLException
  {
    if (this.closed)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }

    return this.statement.totalRowsVisited;
  }

  public int findColumn(String paramString)
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  public void setFetchSize(int paramInt)
    throws SQLException
  {
    SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
    localSQLException.fillInStackTrace();
    throw localSQLException;
  }

  public int getFetchSize()
    throws SQLException
  {
    SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
    localSQLException.fillInStackTrace();
    throw localSQLException;
  }

  boolean isEmptyResultSet()
  {
    return this.statement.rowsDmlReturned == 0;
  }

  public NClob getNClob(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return (NClob)this.returnAccessors[(paramInt - 1)].getCLOB(i);
  }

  public String getNString(int paramInt)
    throws SQLException
  {
    SQLException localSQLException1;
    if (this.closed)
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 11);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams))
    {
      localSQLException1 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 3);
      localSQLException1.fillInStackTrace();
      throw localSQLException1;
    }

    int i = this.statement.currentRow;
    if (i < 0)
    {
      SQLException localSQLException2 = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 14);
      localSQLException2.fillInStackTrace();
      throw localSQLException2;
    }

    this.statement.lastIndex = paramInt;

    return this.returnAccessors[(paramInt - 1)].getString(i);
  }

  public Reader getNCharacterStream(int paramInt)
    throws SQLException
  {
    SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23);
    localSQLException.fillInStackTrace();
    throw localSQLException;
  }

  public RowId getRowId(int paramInt)
    throws SQLException
  {
    return getROWID(paramInt);
  }

  public SQLXML getSQLXML(int paramInt)
    throws SQLException
  {
    SQLException localSQLException = DatabaseError.createUnsupportedFeatureSqlException("getSQLXML");
    localSQLException.fillInStackTrace();
    throw localSQLException;
  }

  public String getCursorName()
    throws SQLException
  {
    synchronized (this.statement.connection)
    {
      SQLException localSQLException = DatabaseError.createSqlException(getConnectionDuringExceptionHandling(), 23, "getCursorName");
      localSQLException.fillInStackTrace();
      throw localSQLException;
    }
  }

  protected OracleConnection getConnectionDuringExceptionHandling()
  {
    return this.statement.getConnectionDuringExceptionHandling();
  }
}